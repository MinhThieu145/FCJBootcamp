[
{
	"uri": "/3-frontendapp/3.1-vpc/",
	"title": "Connect to Public Instance",
	"tags": [],
	"description": "",
	"content": "\nGo to EC2 service management console. Click on Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. At the Modify IAM role page. Click to select SSM-Role. Click Save. You will need to wait about 10 minutes before performing the next step. This time our EC2 instance will automatically register with the Session Manager.\nGo to the AWS Systems Manager service management console Drag the left menu slider down. Click Session Manager. Click Start Session. Then select Public Linux Instance and click Start session to access the instance. Terminal will appear on the browser. Testing with the command sudo tcpdump -nn port 22 and sudo tcpdump we will see no SSH traffic but only HTTPS traffic. Above, we have created a connection to the public instance without opening SSH port 22, for better security, avoiding any attack to the SSH port.\nOne disadvantage of the above method is that we have to open the Security Group outbound at port 443 to the internet. Since it\u0026rsquo;s a public instance, it probably won\u0026rsquo;t be a problem, but if you want extra security, you can block port 443 to the internet and still use the Session Manager. We will go through this in the private instance section below.\nYou can click terminate to end the currently connected session before proceeding to the next step.\n"
},
{
	"uri": "/1-cicd/1.1-setupgithubandecr/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Session Manager is a function within the AWS System Manager service, SSM provides verifiable and secure version management without opening incoming ports, without Bastion Host or SSH key management. Session Manager also makes it easy to comply with corporate policies that require controlled access to instances, strict security practices, and fully auditable logs with instance access details, while still providing end-users with one-click cross-platform access to your managed instances.\nBy using Session Manager, you get the following advantages that traditional methods do not have:\nNo need to open port 22 for SSH protocol, so it is more secure. Can be configured so that the connection does not need to go outside the internet, so it is more secure. No need to manage the server\u0026rsquo;s private key to connect to SSH. Centralized management of users using AWS IAM. Access to the server easily and simply with one click. Faster access time than traditional methods like SSH Support many different operating systems such as Linux, Windows, MacOS Log the connection sessions and commands executed while connecting to the server. With the above advantages, you can use Session Manager instead of using Bastion host technique to save us time and money when managing Bastion server.\n"
},
{
	"uri": "/1-cicd/1.2-setupecrrepo/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Session Manager is a function within the AWS System Manager service, SSM provides verifiable and secure version management without opening incoming ports, without Bastion Host or SSH key management. Session Manager also makes it easy to comply with corporate policies that require controlled access to instances, strict security practices, and fully auditable logs with instance access details, while still providing end-users with one-click cross-platform access to your managed instances.\nBy using Session Manager, you get the following advantages that traditional methods do not have:\nNo need to open port 22 for SSH protocol, so it is more secure. Can be configured so that the connection does not need to go outside the internet, so it is more secure. No need to manage the server\u0026rsquo;s private key to connect to SSH. Centralized management of users using AWS IAM. Access to the server easily and simply with one click. Faster access time than traditional methods like SSH Support many different operating systems such as Linux, Windows, MacOS Log the connection sessions and commands executed while connecting to the server. With the above advantages, you can use Session Manager instead of using Bastion host technique to save us time and money when managing Bastion server.\n"
},
{
	"uri": "/1-cicd/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Session Manager is a function within the AWS System Manager service, SSM provides verifiable and secure version management without opening incoming ports, without Bastion Host or SSH key management. Session Manager also makes it easy to comply with corporate policies that require controlled access to instances, strict security practices, and fully auditable logs with instance access details, while still providing end-users with one-click cross-platform access to your managed instances.\nBy using Session Manager, you get the following advantages that traditional methods do not have:\nNo need to open port 22 for SSH protocol, so it is more secure. Can be configured so that the connection does not need to go outside the internet, so it is more secure. No need to manage the server\u0026rsquo;s private key to connect to SSH. Centralized management of users using AWS IAM. Access to the server easily and simply with one click. Faster access time than traditional methods like SSH Support many different operating systems such as Linux, Windows, MacOS Log the connection sessions and commands executed while connecting to the server. With the above advantages, you can use Session Manager instead of using Bastion host technique to save us time and money when managing Bastion server.\n"
},
{
	"uri": "/2-runtask/2.1-awsbatch/",
	"title": "Preparing VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with 2 public / private subnets. Then create 1 EC2 Instance Linux located in the public subnet, 1 EC2 Instance Windows located in the private subnet.\nThe architecture overview after you complete this step will be as follows:\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Create VPC Create Public Subnet Create Private Subnet Create security group Create public Linux server Create private Windows server "
},
{
	"uri": "/5-cleanup/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/6-cdk/6.1-cicd/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/6-cdk/6.2-runtask/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/6-cdk/6.3-frontend/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/6-cdk/6.3-wrapup/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/6-cdk/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/1-cicd/1.3-deployoncloud/",
	"title": "CICD",
	"tags": [],
	"description": "",
	"content": "\nKhái niệm CICD CICD là quá trình tích hợp, update code thường xuyên. Có thể nhanh chóng build, test và deploy 1 cách liên tục. Trong bài workshop này, mình sẽ làm 1 pipeline để tự lấy code từ Github khi có thay đổi, build thành docker image và đẩy vào ECR.\nSetup Github và Scraper cho Indeed Để thuận tiện thì mình sẽ cung cấp link Github: https://github.com/MinhThieu145/Job-Scraper-Home.git. Bạn cần clone repo này về máy và upload lên github của riêng mình.\ngit clone https://github.com/MinhThieu145/Job-Scraper-Home.git Do workshop này tập trung vào Cloud, nên mình sẽ không đi sâu vào từng phần trong rep. Một số file bạn nên hiểu\n1. File buildspec.yml version: 0.2 phases: pre_build: commands: - echo \u0026#34;Logging in to ECR\u0026#34; - aws --version - AWS_DEFAULT_REGION=us-east-1 - AWS_ACCOUNT_ID=238101178196 - IMAGE_TAG=latest - REPOSITORY_URI=238101178196.dkr.ecr.us-east-1.amazonaws.com/indeed-scraper - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com build: commands: - echo \u0026#34;Building the Docker image...\u0026#34; - docker build -t $REPOSITORY_URI:$IMAGE_TAG . - docker push $REPOSITORY_URI:$IMAGE_TAG post_build: commands: - echo \u0026#34;Updating ECS service...\u0026#34; - echo \u0026#34;End of script\u0026#34; artifacts: files: - \u0026#39;**/*\u0026#39; name: artifacts File này cực kì quan trọng, vì nó dùng để push image lên ECR trong Codebuild. Buildspec được chia làm 3 phase, pre_build, build và post_build. Theo mình thì 3 phase chủ yếu để cho clean và phòng lỗi, bạn hoàn toàn có thể dồn gần hết code vào 1 phase.\nPre_build Trong phase pre_build, mình setup 1 số phần quan trọng như\nAWS_DEFAULT_REGION: region mà bạn dùng cho bài workshop này, mình dùng us-east-1 (virginia) AWS_ACCOUNT_ID: Account ID tài khoản AWS của ban, có thể tìm được ở phần account IMAGE_TAG: Tag của image mà bạn muốn lấy trong ECR. Trong quá trình build, bạn sẽ update image nhiều lần, mỗi lần là tag + 1. Nên tag latest giúp bạn lấy image mới nhất REPOSITORY_URI: link của ECR repo chứa image, mình sẽ tạo ngay ở phía dưới. Tạo ECR repo Bạn cần tìm ECR -\u0026gt; chọn Create repository. Các setting bạn để như sau Visibility: Chọn chế độ private. Mình từng gặp lỗi không thể pull image được nếu để là public, nên recommend đặt là private Repository name: Đặt tên cho repo, bạn có thể thấy được link repo. Link 1 repo được viết như sau: 238101178196.dkr.ecr.us-east-1.amazonaws.com/indeed-scraper Trong đó dãy số đứng đầu là account Id của bạn Sau chữ \u0026rsquo;ecr\u0026rsquo; là region sử dụng và cuối cùng là tên bạn tự đặt, của mình là indeed-scraper Ở 3 options còn lại, bạn có thể để là disable Sau khi tạo xong, bạn có thể copy URI của repo vừa tạo và paste vào file buildspec Build Bên trong phase này, mình để các code chính, tức là code liên quan đến việc build và push lên ECR.\ndocker build -t $REPOSITORY_URI:$IMAGE_TAG . Đừng quên có 1 dấu chấm sau chữ IMAGE_TAG đấy. Dòng này dùng để build Docker image và set tag là latest docker push $REPOSITORY_URI:$IMAGE_TAG Dùng để push image lên ECR repo Post_build Cả 2 dòng lệnh đều dùng để log ra console để thông báo hoàn thành\nDockerfile # based image: Ubuntubased. BTW, for the PYTHON:3.9 like you used last time. It used the Debianbased image FROM public.ecr.aws/docker/library/ubuntu:22.04 # install a few things RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ bash \\ git \\ curl \\ software-properties-common \\ pip \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # workdir WORKDIR /srv # Copy the requirements.txt file first, for separate dependency resolving and downloading COPY requirements.txt . RUN pip install -r requirements.txt # Install chrome broswer RUN curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - RUN echo \u0026#34;deb http://dl.google.com/linux/chrome/deb/ stable main\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list.d/google-chrome.list RUN apt-get -y update RUN apt-get -y install google-chrome-stable # add the main.py COPY main.py . # add scraper COPY scraper.py . # add job_description_analyzer COPY job_description_analyzer.py . ENTRYPOINT [ \u0026#34;python3\u0026#34; , \u0026#34;main.py\u0026#34; ] Sơ lược qua file dockerfile, những gì mình làm trong file bao gồm:\nFROM public.ecr.aws/docker/library/ubuntu:22.04 Mình sẽ dùng Ubuntu 22.04 cho base image Dòng tiếp theo để update và upgrade lại packages, cài pip và software properties. Sẽ có 1 số cái không có tác dụng trong project lần này do mình lấy từ template Cài các packages qua file requirements.txt Cài chromebrowswer, do mình sẽ scrap bằng selenium và chrome copy các file main.py, scraper.py và # add job_description_analyzer.py "
},
{
	"uri": "/3-frontendapp/3.2-elb/",
	"title": "Connect to Private instance",
	"tags": [],
	"description": "",
	"content": "For Windows instance located in private subnet, there is no public IP, no internet gateway so it cannot go out internet.\nWith this type of instance, the traditional way is to use Bastion host technique which is expensive and laborious, but here we will use Session Manager with this type.\nBasically, the private instance still has to open the TCP 443 port to System Manager, but we don\u0026rsquo;t want to allow connection go out to the internet, but only in its VPC, to enhance our security posture.\nTo do that, we have to include the System Manager endpoint in the VPC, that is, using the VPC interface endpoint:\nVPC interface endpoint is attached to the subnet, so this method can be done not only with private subnet but also with public subnet, meaning that with public subnet, you can completely prohibit TCP 443 go out to the internet.\nContent: Enable DNS hostnames Create VPC Endpoint Connect Private Instance "
},
{
	"uri": "/2-runtask/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "/3-frontendapp/",
	"title": "Connect to EC2 servers",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Connect to EC2 Public Server 3.2. Cconnect to EC2 Private Server\n"
},
{
	"uri": "/2-runtask/2.2-eventands3/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role In this step, we will proceed to create IAM Role. In this IAM Role, the policy AmazonSSMManagedInstanceCore will be assigned, this is the policy that allows the EC2 server to communicate with the Session Manager.\nGo to IAM service administration interface In the left navigation bar, click Roles. Click Create role. Click AWS service and click EC2. Click Next: Permissions. In the Search box, enter AmazonSSMManagedInstanceCore and press Enter to search for this policy. Click the policy AmazonSSMManagedInstanceCore. Click Next: Tags. Click Next: Review. Name the Role SSM-Role in Role Name Click Create Role . Next, we will make the connection to the EC2 servers we created with Session Manager.\n"
},
{
	"uri": "/4-result/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]